name: Monorepo CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'

jobs:


  # Backend

  build:
    name: Build Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Build Backend
        run: |
          cd apps/backend
          npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nestjs-build
          path: apps/backend/dist

  lint:
    needs: build
    name: Run ESLint & Prettier
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Run ESLint
        run: |
          cd apps/backend
          npx eslint '{src,apps,libs,test}/**/*.ts' --format json > eslint-report.json || true
        
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: apps/backend/eslint-report.json

      - name: Annotate ESLint Errors
        uses: ataylorme/eslint-annotate-action@v2
        with:
          report-json: apps/backend/eslint-report.json

      - name: Run Prettier Check
        run: |
          cd apps/backend
          npx prettier --check './src/**/*.{js,ts}'

      - name: Fail if Linting Issues Found
        if: always()
        run: |
          if jq -je 'map(
          select(
              (.messages | map(select(.severity == 2)) | length > 0)
              and
              (.suppressedMessages | map(select(.severity == 2)) | length == 0)
          )
          ) | length > 0' apps/backend/eslint-report.json; then

            echo "❌ ESLint errors found!"
            exit 1
          else
            echo "✅ No ESLint errors found."
          fi
 
  scan:
    needs: lint
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: |
          cd apps/backend
          docker build -t docker.io/monomediadevelopment/connect-crm:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/monomediadevelopment/connect-crm:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    needs: lint
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Create reports directory
        run: |
          cd apps/backend
          mkdir -p reports

      - name: Run Tests with Coverage
        run: |
          cd apps/backend
          npm run test:cov
        continue-on-error: true
          
      - name: List files in the reports directory
        run: |
          cd apps/backend
          ls -al reports

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: jest-test-results
          path: apps/backend/reports/jest-junit.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/backend/coverage

      - name: Publish Test Results
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "apps/backend/reports/jest-junit.xml"

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'apps/backend/coverage/cobertura-coverage.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: 'private'
          mask-password: true

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: 841162685193.dkr.ecr.eu-west-1.amazonaws.com
          ECR_REPOSITORY: connect-crm
          IMAGE_TAG: latest
        run: |
          cd apps/backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Download Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.0.0

      # - name: Terraform Init
      #   run: terraform init
      #   working-directory: ./terraform

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve
      #   working-directory: ./terraform

      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: ./terraform